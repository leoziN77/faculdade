const allInputKeys = [
  { input: document.querySelector('.input1') },
  { input: document.querySelector('.input2') },
  { input: document.querySelector('.input3') },
  { input: document.querySelector('.input4') },
  { input: document.querySelector('.input5') },
  { input: document.querySelector('.input6') },
  { input: document.querySelector('.input7') },
  { input: document.querySelector('.input8') },
]
const buttonStart = document.querySelector('button')
const badResult = document.querySelector('.bad_result')
const good_result = document.querySelector('.good_result')
const containerChallenge = document.querySelector('.container_challenge')
const progBar = document.querySelector('.current_bar')

const wrongMoveSound = new Audio('./sound/sound_wrong_move_sound.mp3');
const keyPressSound = new Audio('./sound/key_press_sound.mp3')
wrongMoveSound.volume = 0.70
keyPressSound.volume = 0.40

window.addEventListener('keydown', handleEventKey)
buttonStart.addEventListener('click', startStopGame)
@@ -118,15 +120,18 @@ function resetChallenge() {

function handleEventKey(event) {
  const letterInput = event.key.toUpperCase()
  if (event.key === 'Enter') {

  if (letterInput === 'ENTER') {
    console.log('right')
    return startStopGame()
    startStopGame()
    return
  }

  if (isStart && LETTERS.includes(letterInput) && userInput.length < 8) {
    userInput.push(letterInput)

    if (userInput.every((e, i) => e === currentSequence[i])) {
      keyPressSound.play()
      allInputKeys[currentPositionTyping].input.classList.add('key-input-right')
      currentPositionTyping++
      if (userInput.length === 8) {
        clearInterval(timerId)
        good_result.style.display = 'flex'
        containerChallenge.style.display = 'none';
        isStart = false
        buttonStart.classList = 'button-start';
        buttonStart.textContent = 'Start'
        currentSequence.length = 0 //empty array
        userInput.length = 0 //empty array
        resetChallenge()
        allInputKeys.forEach(key => key.input.classList.remove('key-input-right'))
        //Empty the key display
        allInputKeys.forEach((key, index) => {
          key.input.textContent = ''
        })
      }
    }
    else {
      wrongMoveSound.play()
      currentPositionTyping = 0
      allInputKeys.forEach(key => key.input.classList.remove('key-input-right'))
      userInput.length = 0
      currentSequence.length = 0;
      currentSequence.push(...getCodeSequence()) //get a new sequence
      allInputKeys.forEach((key, index) => {
        key.input.textContent = currentSequence[index]
      })
    }
  }
  else {
    if (isStart) { 
      wrongMoveSound.play()
      currentPositionTyping = 0
      allInputKeys.forEach(key => key.input.classList.remove('key-input-right'))
      userInput.length = 0
      currentSequence.length = 0;
      currentSequence.push(...getCodeSequence()) //get a new sequence
      allInputKeys.forEach((key, index) => {
        key.input.textContent = currentSequence[index]
      })
    }
  }
}